
You are an AI developer assigned to build **Hadeeqati**, a bilingual (Arabic/English) home garden care app. Follow the requirements below to create a working MVP:

1. **Project Overview**
   - App Name (Arabic): حديقتي (Hadeeqati)
   - Purpose:  
     - Identify and solve common plant issues via computer vision.  
     - Track and remind users when to water their plants.  
     - Allow users to store/manage every plant they own.  
     - Provide a simple dropshipping marketplace for seeds/plants.

2. **Technology Stack (Suggestions)**
   - **Frontend:**  
     - Use React Native (JavaScript/TypeScript) for a cross-platform mobile app (iOS/Android).  
     - Use React.js + Tailwind CSS if implementing a web app instead.  
   - **Backend:**  
     - Python 3.9+ + FastAPI OR Node.js + Express.  
     - PostgresSQL for relational data.  
     - Redis for caching (optional).  
   - **Computer Vision:**  
     - TensorFlow 2.x or PyTorch.  
     - Serve model with TensorFlow Serving or a FastAPI endpoint wrapping PyTorch.  
   - **Storage/Media:**  
     - AWS S3 (or Cloudinary) to store user images.  
   - **Notifications:**  
     - Firebase Cloud Messaging (FCM).  
   - **Deployment:**  
     - Host backend on Heroku/AWS Elastic Beanstalk.  
     - Host database on RDS/AWS or Heroku Postgres.  
     - Mobile build distributed via TestFlight/Google Play Beta.

3. **Database Schema**
   - **Tables:**
     1. `users`  
        - `id` (PK), `email` (unique), `password_hash`, `display_name`, `language_preference` (enum: “ar”/“en”), `created_at`.
     2. `plants`  
        - `plant_id` (PK), `arabic_name`, `latin_name`, `description`, `light_level` (enum), `watering_interval_days`, `common_issues` (JSON array of strings), `remedies` (JSON object keyed by issue).
     3. `user_plants`  
        - `user_plant_id` (PK), `user_id` (FK → users), `plant_id` (FK → plants), `nickname`, `date_added`, `last_watered_date`, `custom_interval_days` (nullable), `location` (varchar), `photo_url` (nullable).
     4. `reminders`  
        - `reminder_id` (PK), `user_plant_id` (FK → user_plants), `next_water_date`, `sent` (boolean), `created_at`.
     5. `products`  
        - `product_id` (PK), `arabic_name`, `english_name`, `description`, `image_url`, `price_usd` (numeric), `supplier_api_url`, `category` (enum).
     6. `orders`  
        - `order_id` (PK), `user_id` (FK → users), `product_id` (FK → products), `quantity`, `total_price_usd`, `shipping_address`, `order_date`, `status` (enum: “Pending”/“Shipped”/“Delivered”).
   
4. **API Endpoints**
   - **Auth:**  
     - `POST /api/v1/auth/register` → `{ email, password, display_name, language }` → returns JWT token.  
     - `POST /api/v1/auth/login` → `{ email, password }` → returns JWT token.
   - **Plants Data (Public):**  
     - `GET /api/v1/plants` → returns list of all plants.  
     - `GET /api/v1/plants/{plant_id}` → detailed info for that plant.
   - **User Plants (Protected):**  
     - `GET /api/v1/user_plants` → list of user’s plants.  
     - `POST /api/v1/user_plants` → add new plant → body: `{ plant_id, nickname, last_watered_date, custom_interval_days, location, [optional photo upload] }`.  
     - `PUT /api/v1/user_plants/{user_plant_id}` → update last_watered_date (and optionally photo).  
     - `DELETE /api/v1/user_plants/{user_plant_id}` → remove from collection.
   - **Reminders:**  
     - `GET /api/v1/reminders` → list upcoming reminders for the user.  
     - (Cron job) `POST /api/v1/reminders/send` → triggered daily by a scheduler to send push notifications/emails.
   - **Diagnosis (Computer Vision):**  
     - `POST /api/v1/diagnose` → accepts `multipart/form-data` image → returns `{ identified_plant_id, issue_label, remedies: [text] }`.
   - **Marketplace:**  
     - `GET /api/v1/products` → returns list of dropship products.  
     - `POST /api/v1/cart` → add items to temporary cart in session/local storage.  
     - `POST /api/v1/checkout` → body: `{ cart_items: [ { product_id, quantity } ], shipping_address, payment_token }` → processes payment (Stripe test mode) and calls supplier API → returns order confirmation.  
     - `GET /api/v1/orders` → list user’s past orders and status.
   - **Notifications:**  
     - `POST /api/v1/notifications/register_token` → body: `{ fcm_token }` → save device token to user profile.

5. **Computer Vision Implementation Steps**
   1. **Data Collection:**  
      - Curate ~2000–3000 labeled images:  
        - 10–15 plant species × 5–7 issue categories (e.g., healthy vs. overwatered vs. pest vs. nutrient deficiency).  
        - Public datasets (PlantVillage, etc.) plus a few custom‐labeled images if possible.
   2. **Model Training:**  
      - Choose a lightweight CNN (MobileNetV2 or EfficientNetB0).  
      - Preprocess images: resize to 224×224, normalize to [–1,1].  
      - Train classifier to output both species and issue label. Option: do two‐stage classification (first species, then issue).  
      - Export to TensorFlow SavedModel or TorchScript.
   3. **Server Inference Endpoint:**  
      - Build a FastAPI service at `/api/v1/diagnose`:  
        - Load model at startup.  
        - Accept image file → decode → preprocess → infer → return JSON.
   4. **On-Device Model (Optional MVP):**  
      - Convert to TensorFlow Lite (if using TF). Embed in React Native via `react-native-tflite` plugin. If that’s too complex, just do server side for MVP.

6. **Reminders & Scheduler**
   - Use a background scheduler (e.g., Celery beat or cron job) that runs daily at 02:00 AM Cairo time → 
     1. Query all `user_plants` → calculate `next_water_date = last_watered_date + interval`.  
     2. If `next_water_date == today`, send push notification via FCM to that user’s device token.  
     3. Update `reminders` table with `sent = true` for auditing.

7. **UI/UX Guidelines**
   - **Color Palette:**  
     - Primary: Forest Green (#2E7D32)  
     - Secondary: Earthy Brown (#795548)  
     - Accent: Leafy Lime (#A5D6A7)  
     - Background: Soft Beige (#F5F5DC) or Off-White (#FAFAFA)  
     - Text: Dark Charcoal (#212121)
   - **Fonts:**  
     - Headings: Poppins or Roboto (bold).  
     - Body: Open Sans (regular).
   - **Component Layout (Example in React Native):**  
     1. **Home Screen:**  
        - `SafeAreaView` → `Header`: “Scan Plant” button centered.  
        - `ScrollView`: “Featured Tips” horizontal card list.  
     2. **My Garden Screen:**  
        - `FlatList` of `PlantCard` components (thumbnail + name + water countdown).  
        - Tapping `PlantCard` → `PlantDetailScreen` with “Watered Today” button & “Diagnose” button.  
     3. **Marketplace Screen:**  
        - `FlatList` of `ProductCard` components (image, Arabic/English name, price, “Add to Cart”).
     4. **Profile Screen:**  
        - `View`: User’s profile info, “Language Toggle (AR/EN),” “Logout.”

8. **Project Structure (Example)**
/hadeeqati-app
├─ /frontend
│   ├─ package.json
│   ├─ /src
│   │   ├─ /components
│   │   ├─ /screens
│   │   ├─ /assets
│   │   ├─ theme.js
│   │   └─ App.js
├─ /backend
│   ├─ requirements.txt (or package.json if Node)
│   ├─ /app
│   │   ├─ main.py (FastAPI) or index.js (Express)
│   │   ├─ /models (Pydantic/Sequelize schemas)
│   │   ├─ /routers
│   │   ├─ /services (diagnosis, notifications)
│   │   └─ /utils
├─ /ml\_model
│   ├─ train.py
│   ├─ model\_export/ (SavedModel or TorchScript)
│   └─ /data (images, labels)
├─ README.md
└─ Dockerfile (for backend) / docker-compose.yml

9. **Deliverables for AI Developer**
1. **Database migrations** for all tables.  
2. **REST API** endpoints with proper authentication/authorization.  
3. **ML endpoint** at `/api/v1/diagnose` that returns a consistent JSON schema:
json
   {
     "plant_id": 12,
     "arabic_name": "فيكس",
     "latin_name": "Ficus elastica",
     "issue_label": "overwatering",
     "issue_confidence": 0.87,
     "remedies": [
       "Reduce watering to once every 10 days",
       "Ensure pot has good drainage",
       "Move to indirect bright light"
     ]
   }
4. **Frontend screens** matching the UI/UX guidelines above (using React Native components or responsive web components).  
5. **Reminder scheduler** that triggers push notifications daily at 02:00 AM Africa/Cairo time.  
6. **Stripped‐down marketplace** with a working cart and “Checkout” simulation calling a mock supplier API.  
7. **Documentation** (README) explaining how to build/run both frontend and backend locally, how to train/update the ML model, and how to deploy to production.

10. **Testing & QA**
 - **Unit tests:**  
   - Test each API endpoint (e.g., create user, add plant, diagnose endpoint returns valid JSON).  
   - Mock image inputs for the CV endpoint.  
 - **Integration tests:**  
   - Simulate end-to-end: user registers → adds a plant → triggers a watering reminder → successfully checks out a product.  
 - **User Acceptance:**  
   - Run a small closed beta with 5–10 Arabic-speaking home gardeners for feedback on UI flow, model accuracy, and reminder reliability.

11. **Localization (Bilingual)**
 - Use a translation library (i18next for React Native or React) to store all user‐visible strings in both Arabic and English.  
 - Default to Arabic if `language_preference == "ar"`, else English.
